{"version":3,"sources":["components/AppHeader.js","components/UserCard.js","components/List.js","components/SearchForm.js","components/UserList.js","components/Activity.js","components/UserActivities.js","components/Repository.js","components/UserRepositories.js","components/User.js","serviceWorker.js","index.js"],"names":["AppHeader","className","href","UserCard","user","src","avatar_url","alt","login","List","users","map","key","id","length","SearchForm","searchTerm","handleKeyPress","handleClick","handleClear","type","placeholder","aria-label","value","onChange","onClick","UserList","state","allUsers","filteredUsers","fetchUsers","fetch","then","response","json","catch","err","console","error","event","setState","target","preventDefault","filtered","filter","includes","this","Component","Activity","activity","moment","Date","created_at","format","text","repo","payload","ref_type","ref","name","action","issue","number","activityText","UserActivities","activities","Repository","html_url","rel","description","class","watchers_count","stargazers_count","UserRepositories","repositories","User","userId","props","match","params","userData","userRepositories","userActivities","fetchUserData","userUrl","fetchRepositoryData","repoUrl","fetchActivityData","activityUrl","repos","location","bio","Boolean","window","hostname","ReactDOM","render","basename","Fragment","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cfe1c938.chunk.js","sourcesContent":["import React from 'react';\n\nfunction AppHeader() {\n  return(\n    <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\n      <span className=\"navbar-brand\">Github Users</span>\n      <ul className=\"navbar-nav mr-auto\">\n        <li className=\"nav-item active\">\n          <a href=\"/\" className=\"nav-link\">Home</a>\n        </li>\n      </ul>\n      \n    </nav>\n  );\n}\n\nexport default AppHeader;\n\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction UserCard({user}) {\n  return(\n    <div className=\"col-sm-12 col-md-3 mb-4\">\n      <div className=\"card\">\n        <img className=\"card-img-top\" src={user.avatar_url} alt={user.login} />\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{user.login}</h5>\n          <a href={`/user/${user.login}`} className=\"btn btn-primary\">View</a>\n        </div>\n      </div>\n    </div>\n  );\n} \n\nUserCard.propTypes = {\n  user: PropTypes.shape({\n    login: PropTypes.string.isRequired,\n    avatar_url: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n  }),\n}\nexport default UserCard;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport UserCard from './UserCard';\n\nfunction List({users}) {\n  return (\n    <div className=\"row col-12\">\n      {users.map((user) => <UserCard user={user} key={user.id} />)} \n      {users.length === 0 ? 'There are no results for this term, please try again.' : ''}\n    </div>\n  );\n}\n\nList.propTypes = {\n  users: PropTypes.array.isRequired,\n}\n\nexport default List;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction SearchForm({searchTerm, handleKeyPress, handleClick, handleClear}) {\n  return (\n    <form className=\"form-inline col-12 mx-2 mb-5\">\n      <input \n        className=\"form-control col-sm-12 col-md-9\" \n        type=\"text\" \n        placeholder=\"Search users\" \n        aria-label=\"Search users\"\n        value={searchTerm}\n        onChange={handleKeyPress}\n      />\n      <input \n        type=\"submit\" \n        className=\"btn btn-primary col-md-1 ml-2 my-2\" \n        value=\"Search\" \n        aria-label=\"Search\"\n        onClick={handleClick} \n      />\n      <input \n        type=\"button\" \n        className=\"btn col-md-1 ml-2 my-2\" \n        value=\"Clear\" \n        aria-label=\"Clear\"\n        onClick={handleClear} \n      />\n    </form>\n  );\n}\n\nSearchForm.propTypes = {\n  searchTerm: PropTypes.string.isRequired,\n  handleKeyPress: PropTypes.func.isRequired,\n  handleClick: PropTypes.func.isRequired,\n  handleClear: PropTypes.func.isRequired,\n}\n\nexport default SearchForm;","import React, { Component } from 'react';\nimport AppHeader from './AppHeader';\nimport List from './List';\nimport SearchForm from './SearchForm';\n\nclass UserList extends Component {\n  state = {\n    allUsers: [],\n    searchTerm: '',\n    filteredUsers: [],\n  }\n\n  componentDidMount() {\n    this.fetchUsers().then(users => this.setState({allUsers: users, filteredUsers: users}));\n  }\n\n  fetchUsers = () => {\n    const usersUrl = 'https://api.github.com/users';\n    return fetch(usersUrl)\n      .then(response => response.json())\n      .catch((err) => console.error('There was a problem fetching Users data: ', err) );\n  }\n\n  handleKeyPress = (event) => {\n    this.setState({searchTerm: event.target.value});\n  }\n\n  handleClick = (event) => {\n    event.preventDefault();\n    const filtered = this.state.allUsers.filter((user) => {\n      return user.login.includes(this.state.searchTerm);\n    });\n\n    this.setState({filteredUsers: filtered});\n  }\n\n  handleClear = (event) => {\n    event.preventDefault();\n    this.setState({searchTerm: ''});\n    this.setState({filteredUsers: this.state.allUsers});\n  }\n\n  render() {\n    const { filteredUsers, searchTerm } = this.state;\n    return (\n      <div className=\"App\">\n        <AppHeader />\n        <main className=\"container container-fluid mt-5\">\n          <SearchForm \n            searchTerm={searchTerm} \n            handleKeyPress={this.handleKeyPress}\n            handleClick={this.handleClick}\n            handleClear={this.handleClear}\n          />\n          <List users={filteredUsers} />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default UserList;\n","import React from 'react';\nimport moment from 'moment';\n\nfunction Activity({activity}) {\n  const formattedDate = () => {\n    const parsed = moment(new Date(activity.created_at));\n    return parsed.format('D MMM YYYY');\n  } \n\n  const activityText = () => {\n    let text;\n    const { repo, payload } = activity;\n\n    switch (activity.type) {\n      case 'CreateEvent':\n        text = `Created ${payload.ref_type} ${payload.ref} on ${repo.name}`;\n        break;\n      case 'DeleteEvent':\n        text = `Deleted ${payload.ref_type} ${payload.ref} from ${repo.name}`;\n        break;\n      case 'ForkEvent':\n        text = `Forked ${repo.name}`;\n        break;\n      case 'IssuesEvent':\n        text = `${payload.action} issue #${payload.issue.number} on ${repo.name}`;\n        break;\n      case 'IssueCommentEvent':\n        text = `${payload.action} comment on issue #${payload.issue.number} on ${repo.name}`;\n        break;\n      case 'PublicEvent':\n        text = `Made repository ${repo.name} public`;\n        break;\n      case 'PushEvent':\n        text = `Pushed to ${repo.name}`;\n        break;\n      case 'PullRequestEvent':\n        text = `${payload.action} pull request #${payload.number} on ${repo.name}`;\n        break;\n      case 'PullRequestReviewEvent':\n        text = `${payload.action} pull request #${payload.number} on ${repo.name}`;\n        break;\n      case 'ReleaseEvent':\n        text = `${payload.action} release on ${repo.name}`;\n        break;\n      case 'WatchEvent':\n        text = `${payload.action} watching ${repo.name}`;\n        break;\n      default:\n        // if the type is not already covered output the type attribute\n        text = activity.type;\n        break;\n    }\n\n    return text;\n  }\n\n  return (\n    <li className=\"list-group-item\">\n      <strong>{formattedDate()}:</strong> \n      <p>{activityText()}</p>\n    </li>\n  );\n}\n\nexport default Activity;","import React from 'react';\nimport Activity from './Activity';\n\nfunction UserActivities({activities}) {\n  return (  \n    <ul className=\"list-group\">\n      {activities.map((activity) => <Activity activity={activity} />)}\n      { activities.length === 0 ? 'No activity information available' : ''}\n    </ul>\n    \n  );\n}\n\nexport default UserActivities;","import React from 'react';\n\nfunction Repository({repo}) {\n  return (\n    <li className=\"list-group-item\">\n      <a href={repo.html_url} target=\"_blank\" rel=\"noopener noreferrer\"><h4>{repo.name}</h4></a>\n      <p>{repo.description}</p>\n      <div class=\"row\">\n        <div className=\"col-6\">\n          <strong>Watchers: </strong> {repo.watchers_count}\n        </div>\n        <div className=\"col-6\">\n          <strong>Starred: </strong> {repo.stargazers_count}\n        </div>\n      </div>\n    </li>\n  );\n}\n\nexport default Repository;","import React from 'react';\nimport Repository from './Repository';\n\nfunction UserRepositories({repositories}) {\n  return (\n    <ul className=\"list-group\">\n      {repositories.map((repo) => <Repository repo={repo} />)}\n      {repositories.length === 0 ? 'No repository information available' : ''}\n    </ul>\n  );\n}\n\nexport default UserRepositories;","import React, { Component } from 'react';\nimport AppHeader from './AppHeader';\nimport UserActivities from './UserActivities';\nimport UserRepositories from './UserRepositories';\n\nclass User extends Component {\n  state = {\n    userId: this.props.match.params.id,\n    userData: {},\n    userRepositories: [],\n    userActivities: [],\n  }\n\n  componentDidMount() {\n    this.fetchUserData().then(user => this.setState({userData: user}));\n    this.fetchRepositoryData().then(repos => this.setState({userRepositories: repos}))\n    this.fetchActivityData().then(activities => this.setState({userActivities: activities}));\n  }\n\n  fetchUserData = () => {\n    const userUrl = `https://api.github.com/users/${this.state.userId}`;\n    return fetch(userUrl)\n      .then(response => response.json())\n      .catch((err) => console.error('There was a problem fetching User information: ', err));\n  }\n\n  fetchRepositoryData = () => {\n    const repoUrl = `https://api.github.com/users/${this.state.userId}/repos`;\n    return fetch(repoUrl)\n    .then(response => response.json())\n    .catch((err) => console.error('There was a problem fetching repository information: ', err));\n  }\n\n  fetchActivityData = () => {\n    const activityUrl = `https://api.github.com/users/${this.state.userId}/events`;\n    return fetch(activityUrl)\n    .then(response => response.json())\n    .catch((err) => console.error('There was a problem fetching Activity information: ', err));\n  }\n\n  render() {\n    const { \n      userData, \n      userActivities,\n      userRepositories,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <AppHeader />\n        <div className=\"main\">\n          <div className=\"row\">\n            <div className=\"col-10 text-left offset-1 my-4\">\n              <a href=\"/\">Back to homepage</a>  \n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"jumbotron col-10 offset-1\">\n              <img \n                src={userData.avatar_url} \n                alt={userData.login} \n                className=\"img-fluid col-sm-12 col-md-2 float-left\" \n              />\n              <h1>{userData.name} ({userData.login})</h1>\n              <h3>{userData.location}</h3>\n              <p>{userData.bio}</p>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-md-5 col-sm-12 offset-1\">\n              <h4>Repositories</h4>\n              <UserRepositories repositories={userRepositories} />\n            </div>\n            <div className=\"col-md-5 col-sm-12\">\n              <h4>Recent Activity</h4>\n              <UserActivities activities={userActivities} />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default User;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport './stylesheets/App.css';\nimport './stylesheets/index.css';\nimport './stylesheets/bootstrap.min.css';\nimport UserList from './components/UserList';\nimport User from './components/User';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter basename=\"/\">\n    <React.Fragment>\n      <Route exact path=\"/\" component={UserList} />\n      <Route path=\"/github-users/user/:id\" component={User} />\n    </React.Fragment>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}